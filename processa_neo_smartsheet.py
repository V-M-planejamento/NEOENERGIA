import pandas as pd
import smartsheet
import os
from dotenv import load_dotenv
import sys
from datetime import datetime 
import numpy as np
import re

# Configura√ß√µes
SHEET_NAME = "ACOMPANHAMENTOS NEOERNERGIA"
OUTPUT_CSV = "Dados Reais Tratados e Ordenados.csv"

def carregar_configuracao():
    """Carrega as configura√ß√µes e verifica o ambiente"""
    try:
        if not os.path.exists('.env'):
            raise FileNotFoundError("Arquivo .env n√£o encontrado")
        
        load_dotenv()
        token = os.getenv("SMARTSHEET_ACCESS_TOKEN")
        
        if not token:
            raise ValueError("Token n√£o encontrado no arquivo .env")
        
        return token
    
    except Exception as e:
        print(f"\nERRO DE CONFIGURA√á√ÉO: {str(e)}")
        print("\nPor favor, crie um arquivo .env na mesma pasta do script com:")
        print("SMARTSHEET_ACCESS_TOKEN=seu_token_aqui\n")
        return None

def setup_smartsheet_client(token):
    """Configura o cliente Smartsheet"""
    try:
        client = smartsheet.Smartsheet(token)
        client.errors_as_exceptions(True)
        return client
    except Exception as e:
        print(f"\nERRO: Falha ao configurar cliente Smartsheet - {str(e)}")
        return None

def get_sheet_id(client, sheet_name):
    """Obt√©m o ID da planilha"""
    try:
        print(f"\nBuscando planilha '{sheet_name}'...")
        response = client.Sheets.list_sheets(include_all=True)
        
        for sheet in response.data:
            if sheet.name == sheet_name:
                print(f"Planilha encontrada (ID: {sheet.id})")
                return sheet.id
        
        print(f"\nERRO: Planilha '{sheet_name}' n√£o encontrada")
        print("Planilhas dispon√≠veis:")
        for sheet in response.data[:5]:
            print(f" - {sheet.name} (ID: {sheet.id})")
        if len(response.data) > 5:
            print(f" - ... e mais {len(response.data) - 5} planilhas")
        return None
        
    except smartsheet.exceptions.ApiError as api_error:
        print(f"\nERRO DE API: {api_error.message}")
        return None
    except Exception as e:
        print(f"\nErro inesperado ao buscar planilhas: {str(e)}")
        return None

def get_sheet_data(client, sheet_id):
    """Obt√©m os dados da planilha"""
    try:
        print("\nObtendo dados da planilha...")
        sheet = client.Sheets.get_sheet(
            sheet_id,
            include=['format', 'discussions', 'attachments', 'columnType'],
            page_size=5000
        )
        
        column_map = {column.id: column.title for column in sheet.columns}
        
        rows = []
        for row in sheet.rows:
            row_data = {}
            for cell in row.cells:
                if cell.column_id in column_map:
                    column_name = column_map[cell.column_id]
                    row_data[column_name] = cell.value
            rows.append(row_data)
        
        df = pd.DataFrame(rows)
        print(f"‚úÖ Dados obtidos ({len(df)} linhas, {len(df.columns)} colunas)")
        
        # Verifica√ß√£o inicial dos dados
        print("\nüîç VERIFICA√á√ÉO INICIAL DOS DADOS:")
        print(f"Valores √∫nicos na coluna 'Empreendimento': {df['Empreendimento'].nunique() if 'Empreendimento' in df.columns else 'Coluna n√£o encontrada'}")
        
        if 'FASE' in df.columns:
            print(f"Valores √∫nicos na coluna 'FASE': {df['FASE'].nunique()}")
            print("Top 10 valores em 'FASE':")
            print(df['FASE'].value_counts().head(10))
        
        return df
    
    except Exception as e:
        print(f"\n‚ùå Falha ao obter dados: {str(e)}")
        return pd.DataFrame()

def filtrar_linhas_invalidas(df):
    """
    Filtra linhas que cont√™m valores 'UNKNOWN' ou outros padr√µes inv√°lidos
    em colunas cr√≠ticas como Empreendimento, FASE, SERVI√áO, etc.
    """
    print("\nüö´ FILTRANDO LINHAS COM VALORES INV√ÅLIDOS...")
    
    linhas_antes = len(df)
    
    if df.empty:
        print("‚ö†Ô∏è Nenhum dado para filtrar")
        return df
    
    # Padr√µes de valores inv√°lidos para remover (mais abrangente)
    padroes_invalidos = [
        r'^unknown$', r'^none$', r'^nan$', r'^nat$', r'^\s*$',
        r'base', r'teste', r'exemplo', r'^$',
        r'j\.ser.*2', r'lar.*f1', r'sviii.*f2', r'qdr\.g', r'ba.*4f1'
    ]
    
    # Colunas cr√≠ticas para verificar
    colunas_criticas = ['Empreendimento', 'FASE', 'Nome da tarefa', 'EMP', 'UGB']
    colunas_existentes = [col for col in colunas_criticas if col in df.columns]
    
    print(f"Colunas cr√≠ticas para verifica√ß√£o: {colunas_existentes}")
    
    if not colunas_existentes:
        print("‚ö†Ô∏è Nenhuma coluna cr√≠tica encontrada para verifica√ß√£o")
        return df
    
    # Criar m√°scara para identificar linhas a serem removidas
    mascara_remover = pd.Series([False] * len(df), index=df.index)
    
    for coluna in colunas_existentes:
        if coluna in df.columns:
            # Converter para string para verifica√ß√£o segura e em min√∫sculas
            coluna_str = df[coluna].astype(str).str.strip().str.lower()
            
            # Verificar valores nulos ou vazios primeiro
            mascara_nulos = coluna_str.isna() | (coluna_str == '') | (coluna_str == 'nan')
            
            # Criar m√°scara para valores inv√°lidos nesta coluna
            mascara_invalida_coluna = mascara_nulos.copy()
            for padrao in padroes_invalidos:
                mascara_invalida_coluna = mascara_invalida_coluna | coluna_str.str.contains(padrao, regex=True, na=True)
            
            # Verificar explicitamente por "unknown" (case insensitive)
            mascara_unknown = coluna_str.str.contains('unknown', case=False, na=True)
            mascara_invalida_coluna = mascara_invalida_coluna | mascara_unknown
            
            # Contar inv√°lidos
            invalidos_count = mascara_invalida_coluna.sum()
            if invalidos_count > 0:
                print(f"   ‚Üí Coluna '{coluna}': {invalidos_count} valores inv√°lidos encontrados")
                # Mostrar exemplos dos valores problem√°ticos
                valores_problematicos = df.loc[mascara_invalida_coluna, coluna].unique()[:5]
                print(f"      Valores problem√°ticos: {valores_problematicos}")
            
            # Atualizar m√°scara geral (remove a linha se QUALQUER coluna cr√≠tica for inv√°lida)
            mascara_remover = mascara_remover | mascara_invalida_coluna
    
    # Aplicar filtro para manter apenas as linhas que N√ÉO est√£o na m√°scara de remo√ß√£o
    df_filtrado = df[~mascara_remover].copy()
    
    linhas_removidas = linhas_antes - len(df_filtrado)
    print(f"   ‚Üí Linhas removidas: {linhas_removidas}")
    print(f"   ‚Üí Linhas restantes: {len(df_filtrado)}")
    
    return df_filtrado

def process_data(df):
    """Processa e limpa os dados com foco em remover valores 'UNKNOWN'"""
    if df.empty:
        print("‚ö†Ô∏è Aviso: Nenhum dado recebido para processamento.")
        return df

    try:
        original_rows = len(df)
        print(f"üìä Iniciando processamento de {original_rows} linhas...")

        # 1. Remover as primeiras 915 linhas (se aplic√°vel)
        if len(df) > 915:
            print("üìâ Removendo primeiras 915 linhas...")
            df = df.iloc[915:].reset_index(drop=True)
            print(f"   ‚Üí Linhas ap√≥s remo√ß√£o: {len(df)}")
        else:
            print("‚ö†Ô∏è Aviso: Planilha tem menos de 915 linhas, pulando esta etapa.")

        # 2. FILTRAGEM PRINCIPAL - Remover linhas com valores 'UNKNOWN' e outros inv√°lidos
        df = filtrar_linhas_invalidas(df)
        
        if df.empty:
            print("‚ùå Todas as linhas foram removidas durante a filtragem!")
            return df

        # 3. Remover colunas desnecess√°rias
        colunas_remover = [
            "SERVI√áO","RowNumber", "CATEGORIA", "Destaque", "Atualizar", "Antecessores", 
            "Dura√ß√£o", "Varia√ß√£o (LB-Termino)", "In√≠cio LB", "T√©rmino LB", 
            "Dur LB", "Atribu√≠do a", "PRAZO CARTAS"
        ]
        colunas_existentes = [col for col in colunas_remover if col in df.columns]
        if colunas_existentes:
            df = df.drop(columns=colunas_existentes, errors='ignore')
            print(f"üóëÔ∏è Colunas removidas: {colunas_existentes}")

        # 4. Limpeza adicional de valores nulos
        print("\nüßπ Limpeza final de valores nulos...")
        colunas_para_verificar = ['Empreendimento', 'FASE', 'SERVI√áO']
        colunas_existentes = [col for col in colunas_para_verificar if col in df.columns]
        
        if colunas_existentes:
            linhas_antes = len(df)
            df = df.dropna(subset=colunas_existentes, how='all')
            removidas = linhas_antes - len(df)
            if removidas > 0:
                print(f"   ‚Üí {removidas} linhas removidas por valores nulos em colunas cr√≠ticas")

        # 5. Converter tipos de dados
        print("\nüîÑ Convertendo tipos de dados...")
        date_columns = ["Data de Fim", "Data de In√≠cio"]
        for col in date_columns:
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors='coerce', dayfirst=True)

        if "% conclu√≠do" in df.columns:
            df["% conclu√≠do"] = pd.to_numeric(
                df["% conclu√≠do"].astype(str).str.replace('%', '').str.replace(',', '.'), 
                errors='coerce'
            ) / 100
            df["% conclu√≠do"].fillna(0, inplace=True)

        # 6. VERIFICA√á√ÉO FINAL - Garantir que n√£o h√° mais 'UNKNOWN'
        print("\nüîç VERIFICA√á√ÉO FINAL - VALORES 'UNKNOWN':")
        colunas_para_verificar = ['Empreendimento', 'FASE', 'SERVI√áO', 'Nome da tarefa']
        
        unknown_total = 0
        for coluna in colunas_para_verificar:
            if coluna in df.columns:
                # Verifica√ß√£o mais robusta para unknown
                unknown_mask = (
                    df[coluna].astype(str).str.strip().str.lower()
                    .str.contains('unknown', case=False, na=False)
                )
                unknown_count = unknown_mask.sum()
                unknown_total += unknown_count
                
                print(f"   ‚Üí Coluna '{coluna}': {unknown_count} valores 'unknown' encontrados")
                
                if unknown_count > 0:
                    # Mostrar exemplos dos valores problem√°ticos
                    problematicos = df[unknown_mask]
                    print(f"      Exemplos: {problematicos[coluna].unique()[:3]}")
        
        if unknown_total > 0:
            print(f"‚ö†Ô∏è  ATEN√á√ÉO: Ainda existem {unknown_total} valores 'unknown' no dataset!")
        else:
            print("‚úÖ Nenhum valor 'unknown' encontrado na verifica√ß√£o final!")

        # 7. An√°lise dos dados resultantes
        print(f"\n‚úÖ PROCESSAMENTO CONCLU√çDO: {len(df)}/{original_rows} linhas mantidas.")
        
        if "Empreendimento" in df.columns:
            print("\nüìä DISTRIBUI√á√ÉO DOS EMPREENDIMENTOS:")
            dist = df["Empreendimento"].value_counts()
            for emp, count in dist.items():
                print(f"   - '{emp}': {count} linhas")
        
        if "FASE" in df.columns:
            print("\nüìä DISTRIBUI√á√ÉO DAS FASES:")
            dist = df["FASE"].value_counts()
            for fase, count in dist.items():
                print(f"   - '{fase}': {count} linhas")

        return df

    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO NO PROCESSAMENTO: {str(e)}")
        import traceback
        traceback.print_exc()
        return pd.DataFrame()

def salvar_resultados(df):
    """Salva os dados processados em CSV"""
    try:
        df.to_csv(OUTPUT_CSV, index=False, encoding='utf-8-sig')
        print(f"\nüíæ Arquivo salvo com sucesso: {OUTPUT_CSV}")
        print(f"üìä Total de linhas: {len(df)}")
        
        # Verifica√ß√£o final no arquivo salvo
        if os.path.exists(OUTPUT_CSV):
            df_verificacao = pd.read_csv(OUTPUT_CSV, nrows=5)
            print("\nüìã PRIMEIRAS LINHAS DO ARQUIVO SALVO:")
            print(df_verificacao.to_string(index=False))
            
            # Verificar se h√° UNKNOWN no arquivo salvo
            with open(OUTPUT_CSV, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'unknown' in content.lower():
                    print("‚ö†Ô∏è  ATEN√á√ÉO: Ainda existem valores 'unknown' no arquivo CSV!")
                else:
                    print("‚úÖ Nenhum valor 'unknown' encontrado no arquivo CSV!")
        
        return True
    except Exception as e:
        print(f"\n‚ùå ERRO AO SALVAR: {str(e)}")
        return False

def main():
    print("\n" + "="*60)
    print(" IN√çCIO DO PROCESSAMENTO ".center(60, "="))
    print("="*60)

    token = carregar_configuracao()
    if not token:
        sys.exit(1)

    client = setup_smartsheet_client(token)
    if not client:
        sys.exit(1)

    sheet_id = get_sheet_id(client, SHEET_NAME)
    if not sheet_id:
        sys.exit(1)

    raw_data = get_sheet_data(client, sheet_id)
    if raw_data.empty:
        print("‚ùå Nenhum dado obtido da planilha")
        sys.exit(1)

    processed_data = process_data(raw_data)
    if processed_data.empty:
        print("‚ùå Nenhum dado restante ap√≥s processamento")
        sys.exit(1)

    if not salvar_resultados(processed_data):
        sys.exit(1)

    print("\n" + "="*60)
    print(" PROCESSAMENTO CONCLU√çDO ".center(60, "="))
    print("="*60)

if __name__ == "__main__":
    main()